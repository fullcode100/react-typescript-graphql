import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store/store';
import { fetchCountries, fetchSearchString } from '../services/countryService';
import { Country, FetchCountriesAPIResponse, FetchCountriesAPIResult } from '../models/CountryModel';
import { Continent } from '../models/ContinentModel';


export interface CountryStoreState {
  countries: Country[]| undefined;
  continents: Continent[]| undefined;
  searchValue: string;
  status: 'idle' | 'loading' | 'failed' | 'fetched';
}

const initialState: CountryStoreState = {
  countries:undefined,
  continents: undefined,
  searchValue: '',
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchCountriesAsync = createAsyncThunk(
  'countryInput/fetchSearchString',
  async () => {
    // const response = await fetchSearchString(searchString);
    const response = await fetchCountries();
    //   .then((response)=>{
    //   console.info('data: ', response.json())
    // }).then((data)=>{
    //   console.info('data from response.json: ', data)
    // }) ;
    // // The value we return becomes the `fulfilled` action payload
    // console.info('countryInputSlice -> reducers -> searchAsync: ',
    //   '\nresponse: ', response);

    return (response as any).data;
  },
);

export const countrySlice = createSlice({
  name: 'countryInput',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setSearchValue: (state, action: PayloadAction<string>) => {
      state.searchValue = action.payload;
      console.info('countryInputSlice -> reducers -> setSearchValue: ',
        '\naction: ', action,
        '\nstate: ', state);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchCountriesAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchCountriesAsync.fulfilled, (state, action: {
        payload: FetchCountriesAPIResult
      }) => {
        state.status = 'fetched';
        state.countries = action.payload.countries;
        state.continents = action.payload.continents;
        
        console.info('searchAsync.fulfilled: ',
          '\naction:', action,
          '\npayload:', action.payload,
          '\nstate:', state);

      })
      .addCase(searchCountriesAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const {setSearchValue} = countrySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCountrySearchValue = (state: RootState) => state.country.searchValue;
export const selectFetchStatus = (state: RootState) => state.country.status;
export const selectCountries = (state: RootState) => state.country.countries;
export const selectContinents = (state: RootState) => state.country.continents;
export const getFilteredCountries = (state: RootState) => {
  const searchValue = state.country.searchValue;
  if(!searchValue){
    return undefined;
  }
  const allCountries =  state.country.countries;
  const filteredCountries = allCountries?.filter((country:Country)=>{
         return (country.name.toLowerCase()).includes(searchValue.toLowerCase());
  });
  return  filteredCountries;
};

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const setSearchValueManually =
  (searchString: string): AppThunk =>
    (dispatch, getState) => {
      const currentValue = selectCountrySearchValue(getState());
      console.info('countryInputSlice -> setSearchValueManually : ',
        '\ndispatch: ', dispatch,
        '\ngetState: ', getState,
        '\ncurrentValue: ', currentValue);
      dispatch(setSearchValue(searchString));
    };

export default countrySlice.reducer;
