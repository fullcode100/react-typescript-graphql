import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store/store';
import { fetchCountries, fetchSearchString } from '../services/countryService';
import { ICountry, FetchCountriesAPIResponse, FetchCountriesAPIResult } from '../models/CountryModel';
import { Continent } from '../models/ContinentModel';

export interface CountrySearchPageGUI {
  loading?: boolean;
  countryListItem: {
    clicked: {
      [key: string]: ICountry;
    }
  };
}

 
export interface GUIStoreState {
  countrySearchPage: CountrySearchPageGUI;
}

const initialState: GUIStoreState = {
  countrySearchPage: {
    countryListItem: {
      clicked: {},
    },
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchCountriesAsync = createAsyncThunk(
  'countryInput/fetchSearchString',
  async () => {
    // const response = await fetchSearchString(searchString);
    const response = await fetchCountries();
    //   .then((response)=>{
    //   console.info('data: ', response.json())
    // }).then((data)=>{
    //   console.info('data from response.json: ', data)
    // }) ;
    // // The value we return becomes the `fulfilled` action payload
    // console.info('countryInputSlice -> reducers -> searchAsync: ',
    //   '\nresponse: ', response);

    return (response as any).data;
  },
);

export const guiSlice = createSlice({
  name: 'guiState',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setCountryListItemClick: (state, action: PayloadAction<ICountry>) => {
      state = {...state};
      state.countrySearchPage.countryListItem.clicked[action.payload.code] = action.payload;
      console.info('guiSlice -> reducers -> setCountryListItemClick: ',
        '\naction: ', action,
        '\nstate: ', state);
    },
    unsetCountryListItemClick: (state, action: PayloadAction<ICountry>) => {
      state = {...state};
      delete (state.countrySearchPage.countryListItem.clicked[action.payload.code]);
      // state.countrySearchPage.countryListItem.clicked[action.payload.code] =  action.payload;
      console.info('guiSlice -> reducers -> unsetCountryListItemClick: ',
        '\naction: ', action,
        '\nstate: ', state);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {

  },
});

export const {setCountryListItemClick, unsetCountryListItemClick} = guiSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCountrySearchPage = (state: RootState) => state.gui.countrySearchPage; 
export const selectCountrySearchPageItemsClicked = (state: RootState) => state.gui.countrySearchPage.countryListItem.clicked;


export default guiSlice.reducer;
